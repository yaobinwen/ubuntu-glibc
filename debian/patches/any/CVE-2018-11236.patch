Backport of:

From ff52a12250bd381aaef91edc0269f6e3e79d20ac Mon Sep 17 00:00:00 2001
From: Paul Pluzhnikov <ppluzhnikov@google.com>
Date: Tue, 8 May 2018 18:12:41 -0700
Subject: [PATCH] Fix BZ 22786: integer addition overflow may cause stack
 buffer overflow when realpath() input length is close to SSIZE_MAX.

2018-05-09  Paul Pluzhnikov  <ppluzhnikov@google.com>

	[BZ #22786]
	* stdlib/canonicalize.c (__realpath): Fix overflow in path length
	computation.
	* stdlib/Makefile (test-bz22786): New test.
	* stdlib/test-bz22786.c: New test.

(cherry picked from commit 5460617d1567657621107d895ee2dd83bc1f88f2)
---
 ChangeLog             |  8 +++++
 NEWS                  |  2 ++
 stdlib/Makefile       |  2 +-
 stdlib/canonicalize.c |  2 +-
 stdlib/test-bz22786.c | 90 +++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 102 insertions(+), 2 deletions(-)
 create mode 100644 stdlib/test-bz22786.c

#diff --git a/ChangeLog b/ChangeLog
#index 63813de..699e8e5 100644
#--- a/ChangeLog
#+++ b/ChangeLog
#@@ -1,3 +1,11 @@
#+2018-05-09  Paul Pluzhnikov  <ppluzhnikov@google.com>
#+
#+	[BZ #22786]
#+	* stdlib/canonicalize.c (__realpath): Fix overflow in path length
#+	computation.
#+	* stdlib/Makefile (test-bz22786): New test.
#+	* stdlib/test-bz22786.c: New test.
#+
# 2018-03-23  Andrew Senkevich  <andrew.senkevich@intel.com>
# 	    Max Horn  <max@quendi.de>
# 
#diff --git a/NEWS b/NEWS
#index 77f7f1a..0ff775e 100644
#--- a/NEWS
#+++ b/NEWS
#@@ -63,6 +63,8 @@ The following bugs are resolved with this release:
#   [22644] string: memmove-sse2-unaligned on 32bit x86 produces garbage when
#     crossing 2GB threshold (CVE-2017-18269)
#   [22715] x86-64: Properly align La_x86_64_retval to VEC_SIZE
#+  [22786] libc: Stack buffer overflow in realpath() if input size is close
#+    to SSIZE_MAX (CVE-2018-11236)
# 
# Version 2.24
# 
Index: glibc-2.23/stdlib/Makefile
===================================================================
--- glibc-2.23.orig/stdlib/Makefile	2019-07-03 15:19:46.274058044 -0400
+++ glibc-2.23/stdlib/Makefile	2019-07-03 15:19:46.274058044 -0400
@@ -76,7 +76,8 @@ tests		:= tst-strtol tst-strtod testmb t
 		   tst-secure-getenv tst-strtod-overflow tst-strtod-round   \
 		   tst-tininess tst-strtod-underflow tst-tls-atexit	    \
 		   tst-setcontext3 tst-tls-atexit-nodelete		    \
-		   tst-strtol-locale tst-strtod-nan-locale tst-strfmon_l
+		   tst-strtol-locale tst-strtod-nan-locale tst-strfmon_l    \
+		   test-bz22786
 tests-static	:= tst-secure-getenv
 
 modules-names	= tst-tls-atexit-lib
Index: glibc-2.23/stdlib/canonicalize.c
===================================================================
--- glibc-2.23.orig/stdlib/canonicalize.c	2019-07-03 15:19:46.274058044 -0400
+++ glibc-2.23/stdlib/canonicalize.c	2019-07-03 15:19:46.274058044 -0400
@@ -181,7 +181,7 @@ __realpath (const char *name, char *reso
 		extra_buf = __alloca (path_max);
 
 	      len = strlen (end);
-	      if ((long int) (n + len) >= path_max)
+	      if (path_max - n <= len)
 		{
 		  __set_errno (ENAMETOOLONG);
 		  goto error;
Index: glibc-2.23/stdlib/test-bz22786.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ glibc-2.23/stdlib/test-bz22786.c	2019-07-03 15:20:52.242327781 -0400
@@ -0,0 +1,91 @@
+/* Bug 22786: test for buffer overflow in realpath.
+   Copyright (C) 2018 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <http://www.gnu.org/licenses/>.  */
+
+/* This file must be run from within a directory called "stdlib".  */
+
+#include <errno.h>
+#include <limits.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <libc-internal.h>
+
+/* Prototype for our test function.  */
+static int do_test (int argc, char *argv[]);
+#include <test-skeleton.c>
+
+static int
+do_test (int argc, char ** argv)
+{
+  const char dir[] = "bz22786";
+  const char lnk[] = "bz22786/symlink";
+
+  rmdir (dir);
+  if (mkdir (dir, 0755) != 0 && errno != EEXIST)
+    {
+      printf ("mkdir %s: %m\n", dir);
+      return EXIT_FAILURE;
+    }
+  if (symlink (".", lnk) != 0 && errno != EEXIST)
+    {
+      printf ("symlink (%s, %s): %m\n", dir, lnk);
+      return EXIT_FAILURE;
+    }
+
+  const size_t path_len = (size_t) INT_MAX + 1;
+
+  DIAG_PUSH_NEEDS_COMMENT;
+#if __GNUC_PREREQ (7, 0)
+  /* GCC 7 warns about too-large allocations; here we need such
+     allocation to succeed for the test to work.  */
+  DIAG_IGNORE_NEEDS_COMMENT (7, "-Walloc-size-larger-than=");
+#endif
+  char *path = malloc (path_len);
+  DIAG_POP_NEEDS_COMMENT;
+
+  if (path == NULL)
+    {
+      printf ("malloc (%zu): %m\n", path_len);
+      return EXIT_FAILURE;
+    }
+
+  /* Construct very long path = "bz22786/symlink/aaaa....."  */
+  char *p = mempcpy (path, lnk, sizeof (lnk) - 1);
+  *(p++) = '/';
+  memset (p, 'a', path_len - (path - p) - 2);
+  p[path_len - (path - p) - 1] = '\0';
+
+  /* This call crashes before the fix for bz22786 on 32-bit platforms.  */
+  p = realpath (path, NULL);
+
+  if (p != NULL || errno != ENAMETOOLONG)
+    {
+      printf ("realpath: %s (%m)", p);
+      return EXIT_FAILURE;
+    }
+
+  /* Cleanup.  */
+  unlink (lnk);
+  rmdir (dir);
+
+  return 0;
+}
+
